<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>DaiweiWang@Github</title><link href="https://wangdaiwei.github.io/" rel="alternate"></link><link href="https://wangdaiwei.github.io/feeds/all.atom.xml" rel="self"></link><id>https://wangdaiwei.github.io/</id><updated>2018-01-21T17:00:00+08:00</updated><entry><title>UGUI的基础知识</title><link href="https://wangdaiwei.github.io/uguide-ji-chu-zhi-shi.html" rel="alternate"></link><published>2018-01-21T17:00:00+08:00</published><updated>2018-01-21T17:00:00+08:00</updated><author><name>Daiwei Wang</name></author><id>tag:wangdaiwei.github.io,2018-01-21:/uguide-ji-chu-zhi-shi.html</id><summary type="html">&lt;p&gt;最近在处理UGUI的效率问题，所以顺便翻译一下Unity UI的相关文档，以供查阅。&lt;/p&gt;
&lt;h1&gt;基本概念&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Canvas&lt;/em&gt;（画布）组件是所有UI元素都需要用到的类，通过 &lt;em&gt;Canvas&lt;/em&gt; 组件，UI元素的顶点和面得以映射到世界坐标系中，并根据 &lt;em&gt;Canvas&lt;/em&gt; 的设置决定如何绘制。一个很神奇的地方就是，当创建一个 &lt;em&gt;Canvas&lt;/em&gt; 元素的时候，场景里会出现一个非常硕大的平面，相对于普通的模型而言非常巨大。&lt;/p&gt;
&lt;p&gt;&lt;img alt="image_1" src="https://wangdaiwei.github.io/img/UIOptimization/canvas_and_cube.png"&gt;&lt;/p&gt;
&lt;p&gt;图中红框里的立方体的边长是1米，旁边巨大的白色细框是 &lt;em&gt;Canvas&lt;/em&gt; 的范围，可以看到比立方体大很多。造成这个现象的原因是UI在 &lt;em&gt;Scene View&lt;/em&gt; 视图中绘制时，用的是1个单位对应1个像素绘制的，而在世界坐标系中，1个单位就代表了1米。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Canvas&lt;/em&gt; 并不是每一帧都在刷新，而是当底下的UI元素需要&lt;strong&gt;重新合批(rebatch)&lt;/strong&gt;的时候才刷新，这个时候 &lt;em&gt;Canvas&lt;/em&gt; 被认为是&lt;strong&gt;有修改的(dirty)&lt;/strong&gt;。另外，顶点和面的几何信息并不是 &lt;em&gt;Canvas&lt;/em&gt; 直接收集的，而是通过 &lt;em&gt;Canvas …&lt;/em&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;最近在处理UGUI的效率问题，所以顺便翻译一下Unity UI的相关文档，以供查阅。&lt;/p&gt;
&lt;h1&gt;基本概念&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Canvas&lt;/em&gt;（画布）组件是所有UI元素都需要用到的类，通过 &lt;em&gt;Canvas&lt;/em&gt; 组件，UI元素的顶点和面得以映射到世界坐标系中，并根据 &lt;em&gt;Canvas&lt;/em&gt; 的设置决定如何绘制。一个很神奇的地方就是，当创建一个 &lt;em&gt;Canvas&lt;/em&gt; 元素的时候，场景里会出现一个非常硕大的平面，相对于普通的模型而言非常巨大。&lt;/p&gt;
&lt;p&gt;&lt;img alt="image_1" src="https://wangdaiwei.github.io/img/UIOptimization/canvas_and_cube.png"&gt;&lt;/p&gt;
&lt;p&gt;图中红框里的立方体的边长是1米，旁边巨大的白色细框是 &lt;em&gt;Canvas&lt;/em&gt; 的范围，可以看到比立方体大很多。造成这个现象的原因是UI在 &lt;em&gt;Scene View&lt;/em&gt; 视图中绘制时，用的是1个单位对应1个像素绘制的，而在世界坐标系中，1个单位就代表了1米。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Canvas&lt;/em&gt; 并不是每一帧都在刷新，而是当底下的UI元素需要&lt;strong&gt;重新合批(rebatch)&lt;/strong&gt;的时候才刷新，这个时候 &lt;em&gt;Canvas&lt;/em&gt; 被认为是&lt;strong&gt;有修改的(dirty)&lt;/strong&gt;。另外，顶点和面的几何信息并不是 &lt;em&gt;Canvas&lt;/em&gt; 直接收集的，而是通过 &lt;em&gt;Canvas Renderer&lt;/em&gt; 组件。Unity官方文档强烈建议自定义的UI组件物体上面一定要添加一个 &lt;em&gt;Canvas Renderer&lt;/em&gt; 组件。&lt;/p&gt;
&lt;p&gt;另外两个比较重要的基础组件包括 &lt;em&gt;Graphic&lt;/em&gt; 组件和 &lt;em&gt;Layout&lt;/em&gt; 组件，前者是所有UI元素的基类，提供基本的绘制接口；后者是调整UI布局的组件，只跟 &lt;em&gt;RectTransforms&lt;/em&gt; 相关，并不依赖于 &lt;em&gt;Graphic&lt;/em&gt; 相关的类。它们共同的特征就是在 &lt;em&gt;CanvasUpdateRegistry&lt;/em&gt; 类中注册了监听事件，当 &lt;em&gt;CanvasUpdateRegistry&lt;/em&gt; 收到一个 &lt;em&gt;willRenderCanvases&lt;/em&gt; &lt;strong&gt;重建(rebuild)&lt;/strong&gt;事件的时候，会调用相应的函数处理。&lt;/p&gt;
&lt;p&gt;UGUI渲染时有一个特性，就是所有的UI元素都是在Transparent队列中绘制的，并且不会因为被别的UI元素遮挡而剔除出渲染队列。因此，如果有全屏的UI存在的话，如果有被盖住的UI，最好是将其设为Disabled状态，或者是将Canvas组件设为Disabled，后者的效率更高一些，但是无法处理特效的显隐。&lt;/p&gt;
&lt;h1&gt;UI的合批操作&lt;/h1&gt;
&lt;p&gt;在UI重建之前，需要对Canvas组件下的UI元素进行合批，以便按照深度排序，并收集各个UI的Mesh信息。正常情况下，合批操作只会在Canvas被设为Dirty的情况下需要处理。能够导致这种情况的时间包括但不限于子元素的移动，缩放，添加，删除等操作。文档中还提到一点，收集的Mesh信息只包括Canvas底下包含的Canvas Renderer组件传回来的信息，并且不包括子Canvas。因此，如果在同一个界面中有一部分元素需要频繁修改，另一部分保持不变的情况，可以考虑给经常修改的部分单独再添加一个Canvas组件。&lt;/p&gt;
&lt;h1&gt;UI的重建过程&lt;/h1&gt;
&lt;p&gt;完成了合批操作之后，Unity会发送渲染指令给图形管道，以便完成Mesh的重建过程。如前文所述，&lt;em&gt;CanvasUpdateRegistry&lt;/em&gt; 负责处理重建过程，关联的函数是&lt;em&gt;PerformUpdate&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;一共有三个步骤：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1、被置为dirty状态的Layout组件需要通过ICanvasElement.Rebuild方法重建子UI元素的布局；
2、ClippingRegistry.Cull方法会根据UI元素的大小裁剪掉所有注册的可裁剪元素；
3、被置为dirty状态的Graphic元素会重建它们的图形元素（前者Graphic指Graphic类相关的元素，后者的图形指的是实际显示的图形）
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看出重建过程分为两部分，分别是Layout重建和Graphic重建。Layout重建有三个部分，分别是PreLayout，Layout和PostLayout。Graphic重建有两个部分，分别是PreRender和LatePreRender。&lt;/p&gt;
&lt;p&gt;Layout重建之前，首先需要按照层级关系进行排序，考虑到更接近根物体的Layout可能会影响到层级更低的物体的Layout，因此必须先计算它们的Layout。因此，UGUI采用的是根据层级关系排序，层级越高则在Layout列表里的位置就越靠前。&lt;/p&gt;
&lt;p&gt;当 &lt;em&gt;ICanvasElement&lt;/em&gt; 组件的 &lt;em&gt;Rebuild&lt;/em&gt; 方法被调用时，Graphic类会在PreRender这一步检查有哪些Graphic元素需要被重建。需要重建的情况包括：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;顶点数据被置为dirty (比如RectTransform修改了大小)，则mesh信息会被重建
材质数据被置为dirty (比如组件的材质球或者贴图被修改了)，则同一个GameObject上挂在的Canvas Renderer的材质也会被更新
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Graphic重建并不需要有任何的顺序，因此也不需要对输入进行排序。&lt;/p&gt;
&lt;p&gt;参考文档：&lt;/p&gt;
&lt;p&gt;https://unity3d.com/cn/learn/tutorials/topics/best-practices/fundamentals-unity-ui&lt;/p&gt;</content><category term="Unity"></category><category term="UI"></category><category term="Optimization"></category></entry><entry><title>Fractal</title><link href="https://wangdaiwei.github.io/Fractal.html" rel="alternate"></link><published>2017-01-07T00:00:00+08:00</published><updated>2017-01-07T00:00:00+08:00</updated><author><name>Daiwei Wang</name></author><id>tag:wangdaiwei.github.io,2017-01-07:/Fractal.html</id><summary type="html">&lt;p&gt;这篇文章来自Alan Zucconi的博客，原文链接：
&lt;a href="http://www.alanzucconi.com/2016/08/17/fractals-101/"&gt;http://www.alanzucconi.com/2016/08/17/fractals-101/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Alan还写了很多关于Unity教程的博客，写的都非常好，推荐大家去看一下。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;这个系列的教程将会解释分形这个概念，为什么它很重要以及我们能够从中学到什么。本文将浅要地概述迭代分形和分形维度的概念。&lt;/p&gt;
&lt;p&gt;分形这个概念在自然界中很常见，因此这个系列非常适合那些想在游戏里模拟一个真实的户外环境的人，包括所有的美术和游戏开发人员。&lt;/p&gt;
&lt;h2&gt;简介&lt;/h2&gt;
&lt;p&gt;拿我们非常熟悉的球体举例，平时我们观察球体时觉得它的面是一个曲面，如果你以非常近的距离观察球体，你会发现当距离足够近的时候，整个球面就好像平面一样。这种情况就好像我们每天观察地球一样，我们生活的地方看上去就是一个很大的平面，但实际上地球是圆的。除了地球，其他任何形状的物体也是一样，即使是最精细的多面体，离得足够近时也依然是平面构成的。简而言之，所谓球体这个概念，只有在一定距离观察才有意义。这个概念如此的显而易见，似乎我们可以认为所有物体应该都有这样的特性。但还是有一些特别的几何体超出了这个概念的范围，这种特殊的形状能够包含无限层次的精细程度，我们称之为&lt;strong&gt;分形&lt;/strong&gt;。这种物体具有一种奇特的特征，不管我们以多么近的距离去观察它，它的细节程度丝毫不会损失，反而会越来越精细。更为奇特的是，有一些分形会具有一种叫做自相似性的属性，观察某一部分的细节时，会发现这一部分具有跟整体一样的复杂度 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;这篇文章来自Alan Zucconi的博客，原文链接：
&lt;a href="http://www.alanzucconi.com/2016/08/17/fractals-101/"&gt;http://www.alanzucconi.com/2016/08/17/fractals-101/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Alan还写了很多关于Unity教程的博客，写的都非常好，推荐大家去看一下。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;这个系列的教程将会解释分形这个概念，为什么它很重要以及我们能够从中学到什么。本文将浅要地概述迭代分形和分形维度的概念。&lt;/p&gt;
&lt;p&gt;分形这个概念在自然界中很常见，因此这个系列非常适合那些想在游戏里模拟一个真实的户外环境的人，包括所有的美术和游戏开发人员。&lt;/p&gt;
&lt;h2&gt;简介&lt;/h2&gt;
&lt;p&gt;拿我们非常熟悉的球体举例，平时我们观察球体时觉得它的面是一个曲面，如果你以非常近的距离观察球体，你会发现当距离足够近的时候，整个球面就好像平面一样。这种情况就好像我们每天观察地球一样，我们生活的地方看上去就是一个很大的平面，但实际上地球是圆的。除了地球，其他任何形状的物体也是一样，即使是最精细的多面体，离得足够近时也依然是平面构成的。简而言之，所谓球体这个概念，只有在一定距离观察才有意义。这个概念如此的显而易见，似乎我们可以认为所有物体应该都有这样的特性。但还是有一些特别的几何体超出了这个概念的范围，这种特殊的形状能够包含无限层次的精细程度，我们称之为&lt;strong&gt;分形&lt;/strong&gt;。这种物体具有一种奇特的特征，不管我们以多么近的距离去观察它，它的细节程度丝毫不会损失，反而会越来越精细。更为奇特的是，有一些分形会具有一种叫做自相似性的属性，观察某一部分的细节时，会发现这一部分具有跟整体一样的复杂度。这种图形就类似于无穷迭代，你凑近一点看，发现这是一个三角形，你往某一个角上使劲观察，会发现它还是个三角形，子子孙孙无穷匮也。&lt;/p&gt;
&lt;p&gt;&lt;img alt="Koch Snowflake" src="https://wangdaiwei.github.io/img/Fractal/170px-Von_Koch_curve.gif"&gt;&lt;/p&gt;
&lt;p&gt;这段动画演示的是&lt;a href="https://en.wikipedia.org/wiki/Koch_snowflake"&gt;科赫曲线&lt;/a&gt;，一个非常简单的分形的例子。它是分步创建的，每一次循环都添加了额外的复杂度。第一步是创建一个三角形，接下来的每一步都用到了上一步创建的三条边，并给每一条边放置一个三角形，创建出一个六角星的形状。只有是无限迭代生成的曲线才能够称作是完整的科赫曲线。很明显的，它的细节是无限的，每一个循环都在增加它的复杂度，每一个循环都在一定程度上扩展了曲线的周长，因此完整的科赫曲线具有无限的周长。&lt;/p&gt;
&lt;h2&gt;分形的维度&lt;/h2&gt;
&lt;p&gt;之所以叫做分形，是有一定道理的。不过了解这一点之前，我们先来看看维度的概念。我们都很熟悉线是1维的，平面是2维的，而具有体积的物体是3维的。但是为什么线是1维的呢？原因是对于1维的物体而言，任何一个点在1维的中都只需要一个数字来表示。你可以想象一下这样一个场景：你住在一个街上，每一个房子都有一个唯一的房号标识，这个标号可以是这么计算的，是房子到这条街的开始位置的位置。因此给出一个固定的原点，每一个1维的线上都能用到原点的距离表示。&lt;/p&gt;
&lt;p&gt;&lt;img alt="Dimension of Fractals" src="https://wangdaiwei.github.io/img/Fractal/fractal-1.png"&gt;&lt;/p&gt;
&lt;p&gt;对于2维的形状也是如此，这时需要用两个坐标来表示每一个点的位置。不管是处在笛卡尔坐标系还是极坐标系，都需要用到两个数字来表示位置。&lt;/p&gt;
&lt;p&gt;回头再来看看上一节介绍的科赫曲线，我们希望它能够像1维的物体一样，毕竟它是由线条构成的。然而，对于科赫曲线上的点而言，一个坐标并不足以表示曲线上的点，因为在科赫曲线上的任意两点的距离都是相同的：无穷大，可是它也不是2维的，因为它并没有面积的概念。实际上，它的维度介于1到2之间。科赫曲线有一个不是整数的维度，而是分数，我们也称之为有&lt;strong&gt;分形维度&lt;/strong&gt;。&lt;/p&gt;
&lt;h2&gt;分析复杂度&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Hausdorff Dimension" src="https://wangdaiwei.github.io/img/Fractal/220px-Fractaldimensionexample.png"&gt;&lt;/p&gt;
&lt;p&gt;有不同的方式去衡量分形的维度，这取决于分形是如何构造的。在科赫曲线这个例子中，用到了&lt;a href="https://en.wikipedia.org/wiki/Hausdorff_dimension"&gt;豪斯多夫维数&lt;/a&gt;概念。这是分形在每一个循环中长度，面积或者体积的变化的测度。当你给一条线加上1倍，它的长度也加倍了。当你给矩形的边长加上1倍，它的面积增长了3倍。当你给立方体的边长加上1倍，它的体积增长了8倍。因此，它们的豪斯多夫维数分别是1，2，3。&lt;/p&gt;
&lt;p&gt;创建科赫曲线时，我们需要把每一段曲线取三分之一，然后复制四份，这个过程在每一个新的线段创建时都会重复。所有的分形都用同样的循环步骤生成，根据定义，分形豪斯多夫维数等于&lt;img alt="Result" src="https://wangdaiwei.github.io/img/Fractal/quicklatex.png"&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img alt="Dimension Detail" src="https://wangdaiwei.github.io/img/Fractal/220px-Blueklineani2.gif"&gt;&lt;/p&gt;
&lt;p&gt;如果你有兴趣的话，维基百科有一些非常有趣的分形，&lt;a href="https://en.wikipedia.org/wiki/List_of_fractals_by_Hausdorff_dimension"&gt;点击查看&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;结论&lt;/h2&gt;
&lt;p&gt;这篇文章快速简明地介绍了分形的概念，下一篇文章将会探讨为什么自然中分形出现的概率如此之大，并且它们为什么如此重要。&lt;/p&gt;
&lt;p&gt;&lt;img alt="Fractal" src="https://wangdaiwei.github.io/img/Fractal/fractal_10.jpg"&gt;&lt;/p&gt;</content><category term="Math"></category></entry></feed>